#+TITLE: Memacs
#+AUTHOR: Mar
#+PROPERTY: header-args :tangle init.el :comments link

* Mar Emacs Config
:PROPERTIES:
:CUSTOM_ID: mar-emacs-config
:END:

Currently based on a method described at https://assortedarray.com/posts/my-init-org-setup

I don't know what the deal is with his =org-babel-tangle-config+= function, it works but
runs in an infinite loop even though there's something in it that's supposed to prevent
that. I don't get it. I'm just using =org-babel-tangle= instead and i'm stuck with
manually copying back [[* Custom Set Variables][custom variables]].

I am not using git hooks.

** Table Of Contents
:PROPERTIES:
:CUSTOM_ID: table-of-contents
:END:

- [[#mar-emacs-config][Mar Emacs Config]]
  - [[#table-of-contents][Table Of Contents]]
- [[#initialize-package-system][Initialize Package System]]
- [[#packages][Packages]]
  - [[#p-which-key][Which-Key]]
  - [[#p-smooth-scrolling][Smooth-Scrolling]]
  - [[#p-ido-vertical][Ido-Vertical]]
  - [[#p-smex][Smex]]
  - [[#p-avy][Avy]]
  - [[#p-switch-window][Switch-window]]
  - [[#p-doom-themes][Doom themes]]
  - [[#p-org-superstar][Org-Superstar]]
- [[#custom-functions][Custom Functions]]
  - [[#tangling-my-config][Tangling My Config]]
  - [[#f-splitting-windows][Splitting windows]]
  - [[#f-open-emacs-config][Open Emacs Config]]
  - [[#f-kill-whole-word][Kill whole word]]
  - [[#f-my-test-function][My Test Function]]
- [[#config-core][Config Core]]
  - [[#aliased-funtions][Aliased functions]]
  - [[#visual-settings][Visual Settings]]
    - [[#toolb-n-linum][Toolbars and line numbers]]
    - [[#cursor][Cursor]]
    - [[#theme][Theme]]
  - [[#ido][IDO]]
  - [[#safe-local][Safe Local Variable Values]]
  - [[#custom-set-variables][Custom Set Variables (old)]]
  - [[#org-stuff][Org stuff]]
    - [[#source-editing][Source editing]]
  - [[#editing][Editing]]
    - [[#electric-mode][Electric]]
- [[#keybinds][Keybinds]]
  - [[#k-smex][Smex]]
  - [[#k-ibuffer][Ibuffer]]
  - [[#k-avy][Avy]]
  - [[#k-switch-window][Switch-window]]
  - [[#k-splitting-windows][Splitting windows]]
  - [[#k-open-emacs-config][Open Emacs Config]]
  - [[#k-kill-whole-word][Kill whole word]]

* Initialize Package System
:PROPERTIES:
:CUSTOM_ID: initialize-package-system
:END:

#+BEGIN_SRC elisp
  (require 'package)
  (setq package-enable-at-startup nil)
  (add-to-list 'package-archives
	       '("melpa" . "https://melpa.org/packages/"))
  (package-initialize)
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
#+END_SRC

* Packages
:PROPERTIES:
:CUSTOM_ID: packages
:END:

** Which-Key
:PROPERTIES:
:CUSTOM_ID: p-which-key
:END:

Makes a menu pop up from below that shows further possible key
combinations.

#+BEGIN_SRC elisp
  (use-package which-key
	       :ensure t
	       :config (which-key-mode 1))
#+END_SRC

** Smooth-Scrolling
:PROPERTIES:
:CUSTOM_ID: p-smooth-scrolling
:END:

Makes scrolling behave the way I want.

#+BEGIN_SRC elisp
  (use-package smooth-scrolling
	       :ensure t
	       :config (smooth-scrolling-mode 1))
#+END_SRC

** Ido-Vertical
:PROPERTIES:
:CUSTOM_ID: p-ido-vertical
:END:

Modfies =ido= to use a vertical menu.

#+BEGIN_SRC elisp
  (use-package ido-vertical-mode
    :ensure t
    :config
    (ido-vertical-mode 1)
    (setq-default ido-vertical-define-keys 'C-n-and-C-p-only))
#+END_SRC

** Smex
:PROPERTIES:
:CUSTOM_ID: p-smex
:END:

Replaces =execute-external-command= (default =M-x=) to something
similar to ido-vertical. Bound to =M-x= in [[#keybinds][Keybinds]].

#+BEGIN_SRC elisp
  (use-package smex
    :ensure t
    :config
    (smex-initialize))
#+END_SRC

** Avy
:PROPERTIES:
:CUSTOM_ID: p-avy
:END:

Works kinda like qutebrowser's f button but for single characters
in text.

#+BEGIN_SRC elisp
  (use-package avy
    :ensure t)
#+END_SRC

** Switch-window
:PROPERTIES:
:CUSTOM_ID: p-switch-window
:END:

Makes navigating windows kinda like [[#p-avy][Avy]].

#+BEGIN_SRC elisp
  (use-package switch-window
    :ensure t
    :config
    (setq switch-window-input-style 'minibuffer)
    (setq switch-window-increase 4)
    (setq switch-window-threshold 2)
    (setq switch-window-shortcut-style 'qwerty)
    (setq switch-window-qwerty-shortcuts
	  '("a" "s" "d" "f" "g" "h" "j" "k" "l")))
#+END_SRC

** Doom themes
:PROPERTIES:
:CUSTOM_ID: p-doom-themes
:END:

Doom themes.

#+BEGIN_SRC elisp
  (use-package doom-themes
    :ensure t)
#+END_SRC

** Org-Superstar
:PROPERTIES:
:CUSTOM_ID: p-org-superstar
:END:

Adds graphical elements to org markup.

#+begin_src elisp
  (use-package org-superstar
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda ()(org-superstar-mode 1))))
#+end_src

* Custom Functions
:PROPERTIES:
:CUSTOM_ID: custom-functions
:END:

** Tangling My Config
:PROPERTIES:
:CUSTOM_ID: tangling-my-config
:END:

This is part of managing my config in a single .org file.
Emacs has a funtion called =customize= that makes it easy to
set [[#Custom Set Variables][Custom Set Variables]]. That function saves variables 
directly to init.el. This function copies those changes back
to this file before overwriting init.el with the contents of
this file.

Not current being used because infinite recursion happens
despite the measure to prevent it.

#+BEGIN_SRC elisp :tangle no
  (defun org-babel-tangle-config+ ()
    "Tangle emacs config file. Uses the following custom logic:

  1. Detangle init.el back to org file in order to pick up changes
  to custom variables. Should only pick up changes to that block as
  that's the only one exported with links enabled.

  2. Tangle file with only id type links available. This is a
  workaround to prevent git links from being used when in a git
  repo."
    (interactive)
    (let ((org-link-parameters '(("id" :follow org-id-open))))
      ;; Read back changes to custom variables in init.el
      (save-window-excursion
	(org-babel-detangle "init.el"))
      (let
	  ;; Avoid infinite recursion
	  ((after-save-hook (remove 'org-babel-tangle-config+ after-save-hook)))
	(org-babel-tangle-file (concat user-emacs-directory "config.org")))))
#+END_SRC

** Splitting windows
:PROPERTIES:
:CUSTOM_ID: f-splitting-windows
:END:

These make it so the new split window is selected immediately.

#+BEGIN_SRC elisp
  (defun mar-new-window-below ()
    "Make new window below and select it immediately, keeping all
  windows balanced.

  Calls \"split-window-right\", \"balance-windows\", and \"other-window 1\"."
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))
  (defun mar-new-window-right ()
    "Make new window right and select it immediately, keeping all
  windows balanced.

  Calls \"split-window-right\", \"balance-windows\", and \"other-window 1\"."
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))
#+END_SRC

** Open Emacs Config
:PROPERTIES:
:CUSTOM_ID: f-open-emacs-config
:END:

Just a shorcut for editing emacs config.

#+BEGIN_SRC elisp
  (defun mar-open-emacs-config ()
    "Shortcut to open emacs config"
    (interactive)
    (find-file (concat user-emacs-directory "config.org")))
#+END_SRC

** Kill whole word
:PROPERTIES:
:CUSTOM_ID: f-kill-whole-word
:END:

Eqivelant to vim c i w.

#+BEGIN_SRC elisp
  (defun mar-kill-whole-word ()
    "Kills entire word at point, not just from point to end of word."
    (interactive)
    (backward-word)
    (kill-word 1))
#+END_SRC

** My Test Function
:PROPERTIES:
:CUSTOM_ID: f-my-test-function
:END:

#+BEGIN_SRC elisp
  (defun my-test ()
    "test"
    (interactive)
    (message "wtfbbq"))
#+END_SRC

* Config Core
:PROPERTIES:
:CUSTOM_ID: config-core
:END:

** Aliased functions
:PROPERTIES:
:CUSTOM_ID: aliased-funtions
:END:

#+BEGIN_SRC elisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC

** Visual Settings
:PROPERTIES:
:CUSTOM_ID: visual-settings
:END:

*** Toolbars and line numbers
:PROPERTIES:
:CUSTOM_ID: toolb-n-linum
:END:

#+BEGIN_SRC elisp
  (menu-bar-mode 0)
  (tool-bar-mode 0)
  (scroll-bar-mode 0)
  (display-battery-mode t)
  (setq-default display-line-numbers 'relative)
#+END_SRC

*** Cursor
:PROPERTIES:
:CUSTOM_ID: cursor
:END:

Cursor settings.

#+BEGIN_SRC elisp
  (setq blink-cursor-blinks 0)
  (setq blink-cursor-interval 0.2)
#+END_SRC

*** Theme
:PROPERTIES:
:CUSTOM_ID: theme
:END:

#+BEGIN_SRC elisp
  (setq custom-safe-themes
	'("2f1518e906a8b60fac943d02ad415f1d8b3933a5a7f75e307e6e9a26ef5bf570" default))
  (load-theme 'doom-one)
#+END_SRC

** IDO
:PROPERTIES:
:CUSTOM_ID: ido
:END:

Built-in emacs mode.

Replaces =find-file=, =switch-to-buffer=, and a couple others
with its own functions automatically.

#+BEGIN_SRC elisp
  (setq ido-create-new-buffer 'always)
  (setq ido-everywhere t)
  (ido-mode 1)
#+END_SRC

** Safe Local Variable Values
:PROPERTIES:
:CUSTOM_ID: safe-local
:END:

This declares the file-local variables I set at the end of config.org
to be safe to load without asking each time.

#+BEGIN_SRC elisp
  (setq safe-local-variable-values
   '((eval add-hook 'after-save-hook
	  (lambda nil
	    (org-babel-tangle)
	    (load-file "init.el"))
	  nil t)))
#+END_SRC

** Custom Set Variables (old)
:PROPERTIES:
:CUSTOM_ID: custom-set-variables
:ID: 1234
:END:

I'm keeping this thing around in case I figure out how to have it
automatically copy back to here from =init.el=.

#+BEGIN_SRC elisp :comments link :tangle no
  (custom-set-variables
   ;; custom-set-variables was added by Custom.
   ;; If you edit it by hand, you could mess it up, so be careful.
   ;; Your init file should contain only one such instance.
   ;; If there is more than one, they won't work right.
   '(blink-cursor-blinks 0)
   '(display-battery-mode t)
   '(display-line-numbers 'relative)
   '(package-selected-packages '(smooth-scrolling which-key use-package))
   '(safe-local-variable-values
     '((eval add-hook 'after-save-hook
	     (lambda nil
	       (org-babel-tangle)
	       (load-file "init.el"))
	     nil t))))
  (custom-set-faces
   ;; custom-set-faces was added by Custom.
   ;; If you edit it by hand, you could mess it up, so be careful.
   ;; Your init file should contain only one such instance.
   ;; If there is more than one, they won't work right.
   )
#+END_SRC

** Org stuff
:PROPERTIES:
:CUSTOM_ID: org-stuff
:END:

Stuff concerning Org mode here.

*** Source editing
:PROPERTIES:
:CUSTOM_ID: source-editing
:END:

Edit source blocks in current window instead of splitting into new window.
Not currently being used.

#+BEGIN_SRC elisp :tangle no
  (setq org-src-window-setup 'current-window)
#+END_SRC

** Editing
:PROPERTIES:
:CUSTOM_ID: editing
:END:

Stuff related to how text is manipulated here.

*** Electric
:PROPERTIES:
:CUSTOM_ID: electric-mode
:END:

Automatically enter closing brackets.

#+BEGIN_SRC elisp
  (electric-pair-mode t)
#+END_SRC

* Keybinds
:PROPERTIES:
:CUSTOM_ID: keybinds
:END:

All keybinds will be found here, hopfully.

Currently, two methods of assigning keys are used.

=use-package= will ensure the package is available before 
setting the key. It depends on =bind-key= which provids the 
=describe-personal-keybindings= function which will list the
keys set by =use-package=.

=global-set-key= is built in to Emacs.

** Smex
:PROPERTIES:
:CUSTOM_ID: k-smex
:END:

[[#p-smex][Smex]] assigned here.

#+BEGIN_SRC elisp
  (use-package smex
    :bind
    ("M-x" . smex))
#+END_SRC

** Ibuffer
:PROPERTIES:
:CUSTOM_ID: k-ibuffer
:END:

Built-in function, replaces the default =list-buffers= at =C-x C-b=

#+BEGIN_SRC elisp
  (global-set-key (kbd "C-x C-b") 'ibuffer)
#+END_SRC

** Avy
:PROPERTIES:
:CUSTOM_ID: k-avy
:END:

[[#p-avy][Avy]] assigned here.

#+BEGIN_SRC elisp
  (use-package avy
    :bind
    ("M-s a" . avy-goto-char))
#+END_SRC

** Switch-window
:PROPERTIES:
:CUSTOM_ID: k-switch-window
:END:

[[#p-switch-window][Switch-window]] bound here.

#+BEGIN_SRC elisp
  (use-package switch-window
    :bind
    ([remap other-window] . switch-window))
#+END_SRC

** Splitting windows
:PROPERTIES:
:CUSTOM_ID: k-splitting-windows
:END:

[[#f-splitting-windows][Splitting windows]] stuff here.

#+BEGIN_SRC elisp
  (global-set-key (kbd "C-x 2") 'mar-new-window-below)
  (global-set-key (kbd "C-x 3") 'mar-new-window-right)
#+END_SRC

** Open Emacs Config
:PROPERTIES:
:CUSTOM_ID: k-open-emacs-config
:END:

[[#f-open-emacs-config][Open Emacs Config]] bound here.

#+BEGIN_SRC elisp
  (global-set-key (kbd "C-c e") 'mar-open-emacs-config)
#+END_SRC

** Kill whole word
:PROPERTIES:
:CUSTOM_ID: k-kill-whole-word
:END:

[[#f-kill-whole-word][Kill whole word]] assigned here.

#+BEGIN_SRC elisp
  (global-set-key (kbd "C-c w w") 'mar-kill-whole-word)
#+END_SRC

* Local Variables
** old

I can't figure out the custom variables readback crap. It works but gets stuck in an infinite
loop.

 eval: (add-hook 'after-save-hook (lambda ()(if (fboundp 'org-babel-tangle-config+) (org-babel-tangle-config+)(org-babel-tangle)))) nil t)

** actual
 Local Variables:
 eval: (add-hook 'after-save-hook (lambda ()(org-babel-tangle)(load-file "init.el")) nil t)
 End:
