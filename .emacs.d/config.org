* Mar Emacs Config
#+PROPERTY: header-args :tangle init.el :comments link

Mar

** Config Notes

Currently based on a method described at https://assortedarray.com/posts/my-init-org-setup

I don't know what the deal is with his =org-babel-tangle-config+= function, it works but
runs in an infinite loop even though there's something in it that's supposed to prevent
that. I don't get it. I'm just using =org-babel-tangle= instead and i'm stuck with
manually copying back [[* Custom Set Variables][custom variables]].

I am noot using git hooks.

* Initialize Package System

#+BEGIN_SRC elisp
  (require 'package)
  (setq package-enable-at-startup nil)
  (add-to-list 'package-archives
	       '("melpa" . "https://melpa.org/packages/"))
  (package-initialize)
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
#+END_SRC

* Packages
** Which-Key
   Makes a menu pop up from below that shows further possible key
combinations.
#+BEGIN_SRC elisp
  (use-package which-key
	       :ensure t
	       :config (which-key-mode 1))
#+END_SRC
** Smooth-Scrolling
   Makes scrolling behave the way I want.
#+BEGIN_SRC elisp
  (use-package smooth-scrolling
	       :ensure t
	       :config (smooth-scrolling-mode 1))
#+END_SRC
** Ido-Vertical
   Modfies =ido= to use a vertical menu.
#+BEGIN_SRC elisp
  (use-package ido-vertical-mode
    :ensure t
    :config
    (ido-vertical-mode 1)
    (setq-default ido-vertical-define-keys 'C-n-and-C-p-only))
#+END_SRC
** Smex
   Replaces =execute-external-command= (default =M-x=) to something
similar to ido-vertical. Bound to =M-x= in [[* Keybinds][Keybinds]].
#+BEGIN_SRC elisp
  (use-package smex
    :ensure t
    :config
    (smex-initialize))
#+END_SRC
* Custom Functions
** Tangling My Config

   This is part of managing my config in a single .org file.
Emacs has a funtion called =customize= that makes it easy to
set [[* Custom Set Variables][Custom Set Variables]]. That function saves variables 
directly to init.el. This function copies those changes back
to this file before overwriting init.el with the contents of
this file.

   Not current being used because infinite recursion happens
despite the measure to prevent it.

#+BEGIN_SRC elisp :tangle no
  (defun org-babel-tangle-config+ ()
    "Tangle emacs config file. Uses the following custom logic:

  1. Detangle init.el back to org file in order to pick up changes
  to custom variables. Should only pick up changes to that block as
  that's the only one exported with links enabled.

  2. Tangle file with only id type links available. This is a
  workaround to prevent git links from being used when in a git
  repo."
    (interactive)
    (let ((org-link-parameters '(("id" :follow org-id-open))))
      ;; Read back changes to custom variables in init.el
      (save-window-excursion
	(org-babel-detangle "init.el"))
      (let
	  ;; Avoid infinite recursion
	  ((after-save-hook (remove 'org-babel-tangle-config+ after-save-hook)))
	(org-babel-tangle-file (concat user-emacs-directory "config.org")))))
#+END_SRC

** My Test Function

#+BEGIN_SRC elisp
  (defun my-test ()
    "test"
    (interactive)
    (message "wtfbbq"))
#+END_SRC

* Config Core
** Aliased functions
#+BEGIN_SRC elisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC
** Visual Settings
#+BEGIN_SRC elisp
  (menu-bar-mode nil)
  (tool-bar-mode nil)
  (scroll-bar-mode nil)
  (display-battery-mode t)
  (setq-default display-line-numbers 'relative)
#+END_SRC
** IDO
#+BEGIN_SRC elisp
  (setq ido-create-new-buffer 'always)
  (setq ido-everywhere t)
  (ido-mode 1)
#+END_SRC
** Safe Local Variable Values
   This is declares the file-local variables I set at the end of config.org
to be safe to load without asking each time.
#+BEGIN_SRC elisp
  (setq safe-local-variable-values
   '((eval add-hook 'after-save-hook
	  (lambda nil
	    (org-babel-tangle)
	    (load-file "init.el"))
	  nil t)))
#+END_SRC
** Custom Set Variables (old)
   I'm keeping this thing around in case I figure out how to have it
automatically copy back to here from =init.el=.
:PROPERTIES:
:ID: 1234
:END:
#+BEGIN_SRC elisp :comments link :tangle no
  (custom-set-variables
   ;; custom-set-variables was added by Custom.
   ;; If you edit it by hand, you could mess it up, so be careful.
   ;; Your init file should contain only one such instance.
   ;; If there is more than one, they won't work right.
   '(blink-cursor-blinks 0)
   '(display-battery-mode t)
   '(display-line-numbers 'relative)
   '(package-selected-packages '(smooth-scrolling which-key use-package))
   '(safe-local-variable-values
     '((eval add-hook 'after-save-hook
	     (lambda nil
	       (org-babel-tangle)
	       (load-file "init.el"))
	     nil t))))
  (custom-set-faces
   ;; custom-set-faces was added by Custom.
   ;; If you edit it by hand, you could mess it up, so be careful.
   ;; Your init file should contain only one such instance.
   ;; If there is more than one, they won't work right.
   )
#+END_SRC
* Keybinds
  All keybinds will be found here, hopfully.
** Smex
   Replaces =execute-external-command= at =M-x=.
#+BEGIN_SRC elisp
  (use-package smex
    :bind
    ("M-x" . smex))
#+END_SRC
* Local Variables
** old
   I can't figure out the custom variables readback crap. It works but gets stuck in an infinte
loop.
 eval: (add-hook 'after-save-hook (lambda ()(if (fboundp 'org-babel-tangle-config+) (org-babel-tangle-config+)(org-babel-tangle)))) nil t)
** actual
 Local Variables:
 eval: (add-hook 'after-save-hook (lambda ()(org-babel-tangle)(load-file "init.el")) nil t)
 End:
