* Mar Emacs Config
#+PROPERTY: header-args :tangle init.el

Mar

** Config Notes

Currently based on a method described at https://assortedarray.com/posts/my-init-org-setup

I don't know what the deal is but orb-babel-tangle doesn't work like described in the link,
have to use (org-babel-load-file ~/.emacs.d/init.org) instead.

I am noot using git hooks.

* Initialize Package System

#+BEGIN_SRC emacs-lisp
  (require 'package)
  (setq package-enable-at-startup nil)
  (add-to-list 'package-archives
	       '("melpa" . "https://melpa.org/packages/"))
  (package-initialize)
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
#+END_SRC

* Packages

#+BEGIN_SRC emacs-lisp
  (use-package which-key
	       :ensure t
	       :init (which-key-mode))

  (use-package smooth-scrolling
	       :ensure t
	       :init (smooth-scrolling-mode 1))

#+END_SRC

* Aliased functions

#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC

* Functions
** Tangling My Config

   This is part of managing my config in a single .org file.
Emacs has a funtion called =customize= that makes it easy to
set [[* Custom Set Variables][Custom Set Variables]]. That function saves variables 
directly to init.el. This function copies those changes back
to this file before overwriting init.el with the contents of
this file.

#+BEGIN_SRC emacs-lisp
  (defun org-babel-tangle-config+ ()
    "Tangle emacs config file. Uses the following custom logic:

  1. Detangle init.el back to org file in order to pick up changes
  to custom variables. Should only pick up changes to that block as
  that's the only one exported with links enabled.

  2. Tangle file with only id type links available. This is a
  workaround to prevent git links from being used when in a git
  repo."
    (interactive)
    (let ((org-link-parameters '(("id" :follow org-id-open))))
      ;; Read back changes to custom variables in init.el
      (save-window-excursion
	(org-babel-detangle "init.el"))
      (let
	  ;; Avoid infinite recursion
	  ((after-save-hook (remove 'org-babel-tangle-config+ after-save-hook)))
	(org-babel-tangle-file (concat user-emacs-directory "config.org")))))
#+END_SRC

** My Test Function

#+BEGIN_SRC emacs-lisp
  (defun my-test ()
    "test"
    (interactive)
    (message "wtfbbq"))
#+END_SRC

* Custom Set Variables
:PROPERTIES:
:ID: 1234
:END:

#+BEGIN_SRC emacs-lisp :comments link
  (custom-set-variables
   ;; custom-set-variables was added by Custom.
   ;; If you edit it by hand, you could mess it up, so be careful.
   ;; Your init file should contain only one such instance.
   ;; If there is more than one, they won't work right.
   '(blink-cursor-blinks 0)
   '(display-battery-mode t)
   '(display-line-numbers 'relative)
   '(package-selected-packages '(smooth-scrolling which-key use-package))
   '(safe-local-variable-values
     '((eval add-hook 'after-save-hook
	     (lambda nil
	       (org-babel-tangle)
	       (load-file "init.el"))
	     nil t))))
  (custom-set-faces
   ;; custom-set-faces was added by Custom.
   ;; If you edit it by hand, you could mess it up, so be careful.
   ;; Your init file should contain only one such instance.
   ;; If there is more than one, they won't work right.
   )
#+END_SRC

* Local Variables
** old
   I can't figure out the custom variables readback crap. It works but gets stuck in an infinte
loop.
;# eval: (add-hook 'after-save-hook (lambda ()(if (fboundp 'org-babel-tangle-config+) (org-babel-tangle-config+)(org-babel-tangle)))) nil t)

** actual
# Local Variables:
# eval: (add-hook 'after-save-hook (lambda ()(org-babel-tangle)(load-file "init.el")) nil t)
# End:
